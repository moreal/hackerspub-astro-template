---
interface Language {
  language: string;
  originalLanguage?: string | null;
}

interface Props {
  availableLanguages: Language[];
  currentLanguage: string;
  articleYear: number;
  articleSlug: string;
}

const { availableLanguages, currentLanguage, articleYear, articleSlug } = Astro.props;

function getLanguageUrl(lang: Language, year: number, slug: string) {
  return lang.originalLanguage 
    ? `/posts/${year}/${slug}/${lang.language}/`
    : `/posts/${year}/${slug}/`;
}
---

{availableLanguages.length > 1 && (
  <div class="mb-6 flex items-center gap-3">
    <span class="text-sm font-medium text-gray-700">Available languages:</span>
    <div class="flex flex-wrap gap-2">
      {availableLanguages.map((lang) => {
        const href = getLanguageUrl(lang, articleYear, articleSlug);
        const isCurrent = lang.language === currentLanguage;
        const isOriginal = !lang.originalLanguage;
        
        return (
          <a
            href={href}
            class={isCurrent 
              ? "px-3 py-1 rounded-md bg-blue-600 text-white font-medium text-sm"
              : "px-3 py-1 rounded-md bg-gray-100 hover:bg-gray-200 text-gray-700 text-sm"
            }
          >
            {lang.language}
            {isOriginal && " (Original)"}
          </a>
        );
      })}
    </div>
  </div>
)}
