---
import { getAllArticles } from "@/lib/graphql/client";
import { siteConfig } from "@/config";
import BaseLayout from "@/layouts/BaseLayout.astro";
import Navigation from "@/components/Navigation.astro";
import LanguageSwitcher from "@/components/LanguageSwitcher.astro";
import ArticleMetadata from "@/components/ArticleMetadata.astro";
import Reactions from "@/components/Reactions.astro";
import { generateAlternateLanguageLinks } from "@/lib/utils";
import type { GetStaticPaths } from "astro";

export const getStaticPaths = (async () => {
  const articles = await getAllArticles(
    siteConfig.handle,
    siteConfig.minimumVisibility,
  );
  const paths: any[] = [];

  for (const article of articles) {
    if (article.contents && article.contents.length > 0) {
      const availableContents = article.contents.filter(
        (c) => !c.beingTranslated,
      );

      for (const content of availableContents) {
        if (!content.originalLanguage) continue;

        paths.push({
          params: {
            year: article.publishedYear.toString(),
            slug: article.slug,
            locale: content.language,
          },
          props: {
            article,
            content,
            availableLanguages: availableContents,
          },
        });
      }
    }
  }

  return paths;
}) satisfies GetStaticPaths;

const { article, content, availableLanguages } = Astro.props;
const alternateLinks = generateAlternateLanguageLinks(
  availableLanguages,
  article.publishedYear,
  article.slug,
);
---

<BaseLayout title={content.title} lang={content.language}>
  <Fragment slot="head">
    {
      alternateLinks.map((link) => (
        <link rel="alternate" hreflang={link.hreflang} href={link.href} />
      ))
    }
  </Fragment>

  <header class="mb-8">
    <Navigation class="mb-4 flex gap-4" />
  </header>

  <main>
    <article>
      <LanguageSwitcher
        availableLanguages={availableLanguages}
        currentLanguage={content.language}
        articleYear={article.publishedYear}
        articleSlug={article.slug}
      />

      {
        content.originalLanguage && (
          <div class="mb-4 text-sm text-gray-600">
            Translated from {content.originalLanguage}
          </div>
        )
      }

      <h1 class="text-4xl font-bold mb-3">{content.title}</h1>

      <ArticleMetadata published={content.published} tags={article.tags} />

      <div
        class="prose prose-slate max-w-none mb-8 mt-6"
        set:html={content.content}
      />

      <Reactions reactionGroups={article.reactionGroups} />
    </article>
  </main>
</BaseLayout>
