---
import { getAllArticles } from '../../../../lib/graphql/client';
import { siteConfig } from '../../../../../site.config';
import BaseLayout from '../../../../layouts/BaseLayout.astro';
import Navigation from '../../../../components/Navigation.astro';
import LanguageSwitcher from '../../../../components/LanguageSwitcher.astro';
import ArticleMetadata from '../../../../components/ArticleMetadata.astro';
import Reactions from '../../../../components/Reactions.astro';
import { generateAlternateLanguageLinks } from '../../../../lib/utils';
import type { GetStaticPaths } from 'astro';

export const getStaticPaths = (async () => {
  const articles = await getAllArticles(siteConfig.handle, siteConfig.minimumVisibility);

  return articles.map((article) => {
    let originalContent = null;
    let availableLanguages: any[] = [];
    
    if (article.contents && article.contents.length > 0) {
      const availableContents = article.contents.filter(c => !c.beingTranslated);
      availableLanguages = availableContents;
      originalContent = availableContents.find(c => !c.originalLanguage);
    }

    return {
      params: {
        year: article.publishedYear.toString(),
        slug: article.slug
      },
      props: { 
        article,
        originalContent,
        availableLanguages
      },
    };
  });
}) satisfies GetStaticPaths;

const { article, originalContent, availableLanguages } = Astro.props;
const hasMultipleLanguages = availableLanguages.length > 0;
const content = originalContent || { 
  title: article.name, 
  content: article.content, 
  published: article.published,
  language: 'en'
};
const alternateLinks = hasMultipleLanguages 
  ? generateAlternateLanguageLinks(availableLanguages, article.publishedYear, article.slug)
  : [];
---

<BaseLayout 
  title={content.title} 
  lang={content.language}
>
  <Fragment slot="head">
    {alternateLinks.map(link => (
      <link rel="alternate" hreflang={link.hreflang} href={link.href} />
    ))}
  </Fragment>

  <header class="mb-8">
    <Navigation class="mb-4 flex gap-4" />
  </header>

  <main>
    <article>
      {hasMultipleLanguages && availableLanguages.length > 1 && (
        <LanguageSwitcher
          availableLanguages={availableLanguages}
          currentLanguage={content.language}
          articleYear={article.publishedYear}
          articleSlug={article.slug}
        />
      )}

      <h1 class="text-4xl font-bold mb-3">{content.title}</h1>

      <ArticleMetadata 
        published={article.published} 
        tags={article.tags} 
      />

      <div class="prose prose-slate max-w-none mb-8 mt-6" set:html={content.content} />

      <Reactions reactionGroups={article.reactionGroups} />
    </article>
  </main>
</BaseLayout>
